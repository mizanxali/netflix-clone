{"version":3,"sources":["Nav.js","axios.js","requests.js","Banner.js","Row.js","BrowseScreen.js","firebase.js","AuthModal.js","HomeScreen.js","UserContext.js","ProfileScreen.js","App.js","serviceWorker.js","index.js"],"names":["Nav","useState","showNav","handleShowNav","transitionNavbar","window","scrollY","useEffect","addEventListener","removeEventListener","className","to","src","alt","instance","axios","create","baseURL","requests","fetchTrending","process","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","movie","setMovie","get","then","res","data","results","Math","floor","random","length","str","n","style","backgroundImage","backdrop_path","backgroundSize","backgroundPosition","title","name","original_title","original_name","overview","substring","Row","props","rowItems","setRowItems","fetchURL","map","item","isLargeRow","poster_path","id","BrowseScreen","firebaseapp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","db","firestore","AuthModal","mode","setMode","emailRef","useRef","passwordRef","ref","type","placeholder","defaultValue","email","onClick","event","preventDefault","createUserWithEmailAndPassword","current","value","console","log","collection","doc","user","set","plan","docRef","catch","err","error","alert","message","signInWithEmailAndPassword","withRouter","login","setLogin","signup","setSignup","setEmail","onSubmit","onChange","target","UserContext","React","createContext","ProfileScreen","useContext","setUser","history","useHistory","setPlan","updatePlan","newPlan","update","disabled","signOut","push","App","onAuthStateChanged","userAuth","Provider","path","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70fd1666.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './Nav.css'\r\n\r\nconst Nav = () => {\r\n\r\n    const [showNav, handleShowNav] = useState(false)\r\n\r\n    const transitionNavbar = () => {\r\n        if(window.scrollY > 100) {\r\n            handleShowNav(true)\r\n        }\r\n        else {\r\n            handleShowNav(false)\r\n        }\r\n    }\r\n\r\n    //runs once when component is mounted\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', transitionNavbar) //attach an EventListener which runs transitionNavbar every time user scrolls\r\n        return () => window.removeEventListener('scroll', transitionNavbar) //return function is run when component unmounts, cleaning up the EventListener\r\n    }, [])\r\n\r\n    return (\r\n        <div className={`nav ${showNav && 'nav_black'}`}>\r\n            <div className='nav_contents'>\r\n                <Link to='/'><img className='nav_logo' src='https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png' alt='' /></Link>\r\n                <Link to='/profile'><img className='nav_avatar' src='https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png' alt='' /></Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3'\r\n})\r\n\r\nexport default instance","const requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${process.env.REACT_APP_API_KEY}&language=en-us`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${process.env.REACT_APP_API_KEY}&language=en-us`,\r\n    fetchActionMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default requests","import React, { useEffect, useState } from 'react'\r\nimport './Banner.css'\r\nimport axios from './axios'\r\nimport requests from './requests'\r\n\r\nconst Banner = () => {\r\n\r\n    const [movie, setMovie] = useState([])\r\n\r\n    //runs once when component is mounted\r\n    useEffect(() => {\r\n        axios.get(requests.fetchNetflixOriginals).then(res => {\r\n            setMovie(res.data.results[Math.floor(Math.random() * res.data.results.length - 1)])\r\n        })\r\n    }, [])\r\n\r\n    const truncateDescription = (str, n) => {\r\n        return ((str?.length > n) ? str.substring(0, n-1) + '...' : str)\r\n    }\r\n    \r\n    return(\r\n        <header className='banner' style={{backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`, backgroundSize: 'cover', backgroundPosition: 'center center'}}>\r\n            <div className='banner_contents'>\r\n                <h1 className='banner_title'>{movie?.title || movie?.name || movie?.original_title || movie?.original_name}</h1>\r\n                <div className='banner_buttons'>\r\n                    <button className='banner_button'>Play</button>\r\n                    <button className='banner_button'>More Info</button>\r\n                </div>\r\n                <h1 className='banner_description'>\r\n                    {truncateDescription(movie?.overview, 200)}\r\n                </h1>\r\n            </div>\r\n            <div className='banner-fadeBottom' />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner","import React, { useState, useEffect } from 'react'\r\nimport './Row.css'\r\nimport axios from './axios'\r\n\r\nconst Row = (props) => {\r\n\r\n    const [rowItems, setRowItems] = useState([])\r\n\r\n    const base_url = 'https://image.tmdb.org/t/p/original/'\r\n\r\n    //runs once when component is mounted\r\n    useEffect(() => {\r\n        axios.get(props.fetchURL).then(res => {\r\n            setRowItems(res.data.results)\r\n        })\r\n    }, [props.fetchURL])\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{props.title}</h2>\r\n            <div className='row_posters'>\r\n                {rowItems.map(item => \r\n                    (((props.isLargeRow && item.poster_path) || (!props.isLargeRow && item.backdrop_path)) && (<img className={`row_poster ${props.isLargeRow && 'row_poster-large'}`} key={item.id} src={`${base_url}${props.isLargeRow ? item.poster_path : item.backdrop_path}`} alt={item.name || item.title} />))\r\n                    )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row","import React from 'react'\r\nimport './BrowseScreen.css'\r\nimport Nav from './Nav'\r\nimport Banner from './Banner'\r\nimport requests from './requests'\r\nimport Row from './Row'\r\n\r\nconst BrowseScreen = () => {\r\n    return (\r\n        <div className='browseScreen'>\r\n            <Nav />\r\n            <Banner />\r\n            <Row title='Trending' fetchURL={requests.fetchTrending} />\r\n            <Row title='Top Rated' fetchURL={requests.fetchTopRated} />\r\n            <Row title='Netflix Originals' fetchURL={requests.fetchNetflixOriginals} isLargeRow />\r\n            <Row title='Action Movies' fetchURL={requests.fetchActionMovies} />\r\n            <Row title='Comedy Movies' fetchURL={requests.fetchComedyMovies} />\r\n            <Row title='Horror Movies' fetchURL={requests.fetchHorrorMovies} />\r\n            <Row title='Romance Movies' fetchURL={requests.fetchRomanceMovies} />\r\n            <Row title='Documentaries' fetchURL={requests.fetchDocumentaries} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BrowseScreen","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCVGgtfEYUR_IV8t1HWY6ikoBeyt3b-ooA\",\r\n  authDomain: \"netflix-clone-e05b9.firebaseapp.com\",\r\n  projectId: \"netflix-clone-e05b9\",\r\n  storageBucket: \"netflix-clone-e05b9.appspot.com\",\r\n  messagingSenderId: \"72721616142\",\r\n  appId: \"1:72721616142:web:60e46b2b82b34e03ae1b5f\"\r\n}\r\n\r\nconst firebaseapp = firebase.initializeApp(firebaseConfig)\r\nconst auth = firebase.auth()\r\nconst db = firebaseapp.firestore()\r\n\r\nexport { auth, db }","import React, { useRef, useState } from 'react'\r\nimport './AuthModal.css'\r\nimport { auth, db } from './firebase'\r\n\r\nconst AuthModal = (props) => {\r\n    const [mode, setMode] = useState(props.mode)\r\n\r\n    const emailRef = useRef(null)\r\n    const passwordRef = useRef(null)\r\n\r\n    const signup = (event) => {\r\n        event.preventDefault() //to stop the page from refreshing when form is submitted\r\n        auth.createUserWithEmailAndPassword(emailRef.current.value, passwordRef.current.value)\r\n        .then(res => {\r\n            console.log(res)\r\n            db.collection(\"users\").doc(res.user.email).set({\r\n                plan: \"Basic\"\r\n            })\r\n            .then((docRef) => {\r\n                console.log(\"Document written with ID: \", docRef.id)\r\n            })\r\n            .catch((err) => {\r\n                console.error(err)\r\n            })\r\n        })\r\n        .catch(err => {\r\n            alert(err.message)\r\n        })\r\n    }\r\n\r\n    const login = (event) => {\r\n        event.preventDefault() //to stop the page from refreshing when form is submitted\r\n        auth.signInWithEmailAndPassword(emailRef.current.value, passwordRef.current.value)\r\n        .then(res => {\r\n            console.log(res)\r\n        })\r\n        .catch(err => {\r\n            alert(err.message)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='authModal'>\r\n            <form>\r\n                {mode==='signup' && <h1>Sign Up</h1>}\r\n                {mode==='login' && <h1>Sign In</h1>}\r\n                <input ref={emailRef} type='email' placeholder='Email Address' defaultValue={props.email} />\r\n                <input ref={passwordRef} type='password' placeholder='Password' />\r\n                {mode==='signup' && <button onClick={signup} type='submit'>Sign Up</button>}\r\n                {mode==='login' && <button onClick={login} type='submit'>Sign In</button>}\r\n                {mode==='login' && <h4><span className='authModal_grey'>New to Netflix?</span> <span className='authModal_link' onClick={() => setMode('signup')}>Sign up now.</span></h4>}\r\n                {mode==='signup' && <h4><span className='authModal_grey'>Already on Netflix?</span> <span className='authModal_link' onClick={() => setMode('login')}>Sign in now.</span></h4>}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AuthModal","import React, { useState } from 'react'\r\nimport './HomeScreen.css'\r\nimport AuthModal from './AuthModal'\r\nimport { withRouter } from 'react-router'\r\n\r\nconst HomeScreen = () => {\r\n\r\n    const [login, setLogin] = useState(false)\r\n    const [signup, setSignup] = useState(false)\r\n    const [email, setEmail] = useState('')\r\n\r\n    const emailChangeHandler = (event) => {\r\n        setEmail(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className='homeScreen'>\r\n            <div className='homeScreen_background'>\r\n                <img className='homeScreen_logo' src='https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png' alt='' />\r\n                {!login && !signup && <button className='homeScreen_button' onClick={() => setLogin(true)}>Sign In</button>}\r\n                <div className='homeScreen_gradient'></div>\r\n            </div>\r\n            <div className='homeScreen_body'>\r\n                {!login && !signup &&\r\n                <>\r\n                    <h1>Unlimited movies, TV shows and more.</h1>\r\n                    <h2>Watch anywhere. Cancel anytime.</h2>\r\n                    <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\r\n                    <div className='homeScreen_input'>\r\n                        <form onSubmit={() => setSignup(true)}>\r\n                            <input onChange={emailChangeHandler} type='email' placeholder='Email address' />\r\n                            <button type='submit' className='homeScreen_input_button'>GET STARTED</button>\r\n                        </form>\r\n                    </div>\r\n                    </>\r\n                }\r\n                {!login && signup &&\r\n                    <AuthModal mode='signup' email={email} />\r\n                }\r\n                {login && !signup &&\r\n                    <AuthModal mode='login' email={email} />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(HomeScreen)","import React from 'react'\r\n\r\nconst UserContext = React.createContext(null)\r\n\r\nexport default UserContext","import React, { useContext, useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router'\r\nimport { auth, db } from './firebase'\r\nimport Nav from './Nav'\r\nimport './ProfileScreen.css'\r\nimport UserContext from './UserContext'\r\n\r\nconst ProfileScreen = () => {\r\n\r\n    const {user, setUser} = useContext(UserContext)\r\n    const history = useHistory()\r\n    const [plan, setPlan] = useState(null)\r\n\r\n    useEffect(()=> {\r\n        db.collection(\"users\").doc(user.email).get()\r\n        .then((doc) => {\r\n            setPlan(doc.data().plan)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n\r\n    const updatePlan = (newPlan) => {\r\n        setPlan(newPlan)\r\n        db.collection(\"users\").doc(user.email).update({\r\n            plan: newPlan\r\n        }).then(() => {\r\n            console.log(\"Document successfully updated!\")\r\n        }).catch((err) => {\r\n            console.error(err)\r\n        })\r\n    }\r\n\r\n    const signout = () => {\r\n        auth.signOut()\r\n        setUser(null)\r\n        history.push('/')\r\n    }\r\n\r\n    return (\r\n        <div className='profileScreen'>\r\n            <Nav />\r\n            <div className='profileScreen_body'>\r\n                <h1>Edit Profile</h1>\r\n                <div className='profileScreen_info'>\r\n                    <img src='https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png' alt='' />\r\n                    <div className='profileScreen_details'>\r\n                        <h2>{user.email}</h2>\r\n                        <div className='profileScreen_plans'>\r\n                            <h3>Plans</h3>\r\n                            <p>Renewal Date: </p>\r\n                            <div className='profileScreen_plan'>\r\n                                <div className='profileScreen_planInfo'>\r\n                                    <h5>Mobile 199</h5>\r\n                                    <p>Watch on 1 mobile phone or tablet at a time in Standard Definition. Download videos on 1 phone or tablet.</p>\r\n                                </div>\r\n                                {plan===\"Mobile\" ? <button className=\"profileScreen_disabled\" disabled>Subscribed</button> : <button onClick={() => updatePlan(\"Mobile\")}>₹199/month</button>}\r\n                            </div>\r\n                            <div className='profileScreen_plan'>\r\n                                <div className='profileScreen_planInfo'>\r\n                                    <h5>Basic 499</h5>\r\n                                    <p>Watch on 1 screen at a time in Standard Definition. Download videos on 1 phone or tablet.</p>\r\n                                </div>\r\n                                {plan===\"Basic\" ? <button className=\"profileScreen_disabled\" disabled>Subscribed</button> : <button onClick={() => updatePlan(\"Basic\")}>₹499/month</button>}\r\n                            </div>\r\n                            <div className='profileScreen_plan'>\r\n                                <div className='profileScreen_planInfo'>\r\n                                    <h5>Standard 649</h5>\r\n                                    <p>Watch on 2 screens at a time. Full HD (1080p) available. Download videos on 2 phones or tablets.</p>\r\n                                </div>\r\n                                {plan===\"Standard\" ? <button className=\"profileScreen_disabled\" disabled>Subscribed</button> : <button onClick={() => updatePlan(\"Standard\")}>₹649/month</button>}\r\n                            </div>\r\n                            <div className='profileScreen_plan'>\r\n                                <div className='profileScreen_planInfo'>\r\n                                    <h5>Premium 799</h5>\r\n                                    <p>Watch on 4 screens at a time. Full HD (1080p) and Ultra HD (4K) available. Download videos on 4 phones or tablets.</p>\r\n                                </div>\r\n                                {plan===\"Premium\" ? <button className=\"profileScreen_disabled\" disabled>Subscribed</button> : <button onClick={() => updatePlan(\"Premium\")}>₹799/month</button>}\r\n                            </div>\r\n                        </div>\r\n                        <button onClick={signout} className='profileScreen_signout'>Sign Out</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport BrowseScreen from './BrowseScreen'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport HomeScreen from './HomeScreen'\r\nimport { auth } from './firebase'\r\nimport UserContext from './UserContext'\r\nimport ProfileScreen from './ProfileScreen'\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n      if(userAuth) {\r\n        setUser(userAuth)\r\n      }\r\n    })\r\n\r\n    return unsubscribe\r\n  }, [])\r\n\r\n  return (\r\n    <UserContext.Provider value={{user, setUser}}>\r\n      <div className=\"app\">\r\n        <Route path='/' exact>\r\n          {user ? <Redirect to=\"/browse\" /> : <HomeScreen />}\r\n        </Route>\r\n        <Route path='/browse' exact>\r\n          {user ? <BrowseScreen /> : <Redirect to=\"/\" />}\r\n        </Route>\r\n        <Route path='/profile' exact>\r\n        {user ? <ProfileScreen /> : <Redirect to=\"/\" />}\r\n        </Route>\r\n      </div>\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename='/netflix-clone'>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}